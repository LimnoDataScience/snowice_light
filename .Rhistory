g2 <- ggplot(m.df %>% filter(winter == 'winter19-20'), aes((Time), as.numeric(as.character(variable)), z = water.density(as.numeric(value)))) +
geom_raster(aes(fill = water.density(as.numeric(value))), interpolate = TRUE) +
geom_contour(colour = 'black', breaks = c(water.density(3.5),water.density(3.0), water.density(2.5))) +
scale_fill_gradientn(limits = c(999.92,999.9999999999999999999999999999999),
colours = rev(RColorBrewer::brewer.pal(11, 'PuBuGn')))+
theme_minimal()  +xlab('Time') +
ylab('Depth [m]') +
labs(fill = 'Density [kg/m3]')+
ggtitle('Winter 19-20')+
# geom_line(data = avgtemp, aes(time, thermoclineDep, col = 'thermocline depth'), linetype = 'dashed', col = 'brown') +
# geom_line(data = df.ice, aes(time, ice_h * (-1), col = 'ice thickness'), linetype = 'solid', col = 'darkblue') +
scale_y_reverse(limits = c(3.5,0.15)) + theme_bw(); g2
g2 <- ggplot(m.df %>% filter(winter == 'winter19-20'), aes((Time), as.numeric(as.character(variable)), z = water.density(as.numeric(value)))) +
geom_raster(aes(fill = water.density(as.numeric(value))), interpolate = TRUE) +
geom_contour(colour = 'black', breaks = c(water.density(3.5),water.density(3.0), water.density(2.5))) +
scale_fill_gradientn(limits = c(999.90,999.9999999999999999999999999999999),
colours = rev(RColorBrewer::brewer.pal(11, 'PuBuGn')))+
theme_minimal()  +xlab('Time') +
ylab('Depth [m]') +
labs(fill = 'Density [kg/m3]')+
ggtitle('Winter 19-20')+
# geom_line(data = avgtemp, aes(time, thermoclineDep, col = 'thermocline depth'), linetype = 'dashed', col = 'brown') +
# geom_line(data = df.ice, aes(time, ice_h * (-1), col = 'ice thickness'), linetype = 'solid', col = 'darkblue') +
scale_y_reverse(limits = c(3.5,0.15)) + theme_bw(); g2
g2 <- ggplot(m.df %>% filter(winter == 'winter19-20'), aes((Time), as.numeric(as.character(variable)), z = water.density(as.numeric(value)))) +
geom_raster(aes(fill = water.density(as.numeric(value))), interpolate = TRUE) +
geom_contour(colour = 'black', breaks = c(water.density(3.5),water.density(3.0), water.density(2.5))) +
scale_fill_gradientn(limits = c(999.890,999.9999999999999999999999999999999),
colours = rev(RColorBrewer::brewer.pal(11, 'PuBuGn')))+
theme_minimal()  +xlab('Time') +
ylab('Depth [m]') +
labs(fill = 'Density [kg/m3]')+
ggtitle('Winter 19-20')+
# geom_line(data = avgtemp, aes(time, thermoclineDep, col = 'thermocline depth'), linetype = 'dashed', col = 'brown') +
# geom_line(data = df.ice, aes(time, ice_h * (-1), col = 'ice thickness'), linetype = 'solid', col = 'darkblue') +
scale_y_reverse(limits = c(3.5,0.15)) + theme_bw(); g2
g1 <- ggplot(m.df %>% filter(winter == 'winter18-19'), aes((Time), as.numeric(as.character(variable)), z = water.density(as.numeric(value)))) +
geom_raster(aes(fill = water.density(as.numeric(value))), interpolate = TRUE) +
geom_contour(colour = 'black', breaks = c(water.density(3.5),water.density(3.0), water.density(2.5))) +
scale_fill_gradientn(limits = c(999.890,999.9999999999999999999999999999999),
colours = rev(RColorBrewer::brewer.pal(11, 'PuBuGn')))+
theme_minimal()  +xlab('Time') +
ylab('Depth [m]') +
labs(fill = 'Density [kg/m3]')+
ggtitle('Winter 18-19')+
# geom_line(data = avgtemp, aes(time, thermoclineDep, col = 'thermocline depth'), linetype = 'dashed', col = 'brown') +
# geom_line(data = df.ice, aes(time, ice_h * (-1), col = 'ice thickness'), linetype = 'solid', col = 'darkblue') +
scale_y_reverse(limits = c(3.5,0.15)) + theme_bw(); g1
g3 <- ggplot(m.df %>% filter(winter == 'winter20-21'), aes(x=(Time),y= as.numeric(as.character(variable)), z = water.density(as.numeric(value)))) +
geom_raster(aes(fill = water.density(as.numeric(value))), interpolate = TRUE) +
geom_contour(colour = 'black', breaks = c(water.density(3.5),water.density(3.0), water.density(2.5))) +
scale_fill_gradientn(limits = c(999.890,999.9999999999999999999999999999999),
colours = rev(RColorBrewer::brewer.pal(11, 'PuBuGn')))+
theme_minimal()  +xlab('Time') +
ylab('Depth [m]') +
labs(fill = 'Density [kg/m3]')+
ggtitle('Winter 20-21')+
# geom_line(data = avgtemp, aes(time, thermoclineDep, col = 'thermocline depth'), linetype = 'dashed', col = 'brown') +
# geom_line(data = df.ice, aes(time, ice_h * (-1), col = 'ice thickness'), linetype = 'solid', col = 'darkblue') +
scale_y_reverse(limits = c(3.5,0.15)) + theme_bw() ; g3
p2 <- g1 / g2 / g3
ggsave(filename = 'figs/densitymap.png', plot = p2, width = 20, height = 20, units = 'cm')
library(tidyverse)
library(lubridate)
library(ggpubr)
library(ggsignif)
library(data.table)
setwd('/home/robert/Projects/snowice_light')
raw <- read_csv("field/GHCND_USC00475516_Minocqua.csv")
data = raw %>%
mutate(month = month(DATE),
year = year(DATE),
doy = yday(DATE))
data$winter = NA
data$winter[data$month >= 11 & data$year == 2018] = 'winter18-19'
data$winter[data$month <= 4 & data$year == 2019] = 'winter18-19'
data$winter[data$month >= 11 & data$year == 2019] = 'winter19-20'
data$winter[data$month <= 4 & data$year == 2020] = 'winter19-20'
data$winter[data$month >= 11 & data$year == 2020] = 'winter20-21'
data$winter[data$month <= 4 & data$year == 2021] = 'winter20-21'
ggplot(data %>% filter(!is.na(winter))) +
geom_line(aes(DATE, SNOW, col = 'Snowfall')) +
geom_line(aes(DATE, PRCP, col = 'Rainfall')) +
facet_wrap(~ winter, scales = 'free_x', ncol = 1) +
ggtitle('Precipitation')
ggplot(data %>% filter(!is.na(winter))) +
geom_line(aes(DATE, PRCP)) +
facet_wrap(~ winter, scales = 'free_x', ncol = 1) +
ggtitle('Rainfall')
ggplot(data %>% filter(!is.na(winter)) %>% group_by(winter) %>%
mutate(cumSnow = cumsum(SNOW))) +
geom_line(aes(DATE, cumSnow)) +
facet_wrap(~ winter, scales = 'free_x', ncol = 1) +
ggtitle('CumSnow')
ggplot(data %>% filter(!is.na(winter)) %>% group_by(winter) %>%
mutate(cumT = cumsum(TOBS))) +
geom_line(aes(DATE, cumT)) +
facet_wrap(~ winter, scales = 'free_x', ncol = 1) +
ggtitle('CumTemp')
data
library(dplyr)
library(readr)
library(ggplot2)
library(lubridate)
library(MetBrewer)
library(rLakeAnalyzer)
library(patchwork)
library(ggridges)
library(tidyr)
library(plotly)
library(plot3D)
library(grDevices)
# setwd("C:/Documents and Settings/ladwi/Documents/Projects/R/snowice_light/")
setwd('/home/robert/Projects/snowice_light')
raw <- read_csv("field/SSB_HoboClean.csv")
df <- raw %>%
arrange(dateTime, Depth_m) %>%
mutate(year = year(dateTime),
month = month(dateTime),
hour = hour(dateTime)) %>%
dplyr::select(dateTime, Depth_m, Temp_C, year, month, hour)
df$winter = NA
df$winter[df$month >= 11 & df$year == 2018] = 'winter18-19'
df$winter[df$month <= 4 & df$year == 2019] = 'winter18-19'
df$winter[df$month >= 11 & df$year == 2019] = 'winter19-20'
df$winter[df$month <= 4 & df$year == 2020] = 'winter19-20'
df$winter[df$month >= 11 & df$year == 2020] = 'winter20-21'
df$winter[df$month <= 4 & df$year == 2021] = 'winter20-21'
ggplot(df ) +
geom_line(aes(dateTime, Temp_C, group = as.factor(Depth_m), col = as.factor(Depth_m)))
ggplot(df %>% filter(Depth_m == 0.7)) +
geom_line(aes(dateTime, Temp_C))
df %>% mutate(year = year(dateTime), hour = hour(dateTime), date = yday(dateTime)) %>% filter(year == 2021) %>%
group_by(hour, date,dateTime, Depth_m) %>% summarise(Temp = mean(Temp_C)) %>%
arrange(dateTime, date, hour, Depth_m) %>%
# filter(row_number() %% 72 == 1) %>%
ggplot() +
geom_path(aes(Temp, Depth_m, group = as.factor(hour), col = date)) +
scale_y_reverse() +
# theme(legend.position = "none") +
scale_color_gradientn(colors = met.brewer("Hokusai1", n=100))
ggplot(df %>% dplyr::filter(!is.na(winter)) %>% mutate(date = yday(dateTime), weekday = wday(dateTime)) %>%
dplyr::filter(weekday %in% c(1,4,7)) %>%
group_by(winter, date, Depth_m) %>%
summarise(Temp = mean(Temp_C))) +
geom_path(aes(Temp, Depth_m, group = as.factor(date), col = (date))) +
scale_y_reverse() +
# theme(legend.position = "none") +
scale_color_gradientn(colors = met.brewer("Hokusai1", n=100)) +
facet_wrap(~ winter, ncol =  1)
df_plot = df %>% dplyr::filter(!is.na(winter)) %>% mutate(date = yday(dateTime), weekday = wday(dateTime),
hour = hour(dateTime),
Time = as.POSIXct(paste0(as.Date(dateTime),' ', hour,':00:00'))) %>%
filter(hour == 12 ) %>%
group_by(winter, Time, Depth_m) %>%
summarise(Temp = mean(Temp_C)) %>% mutate(date = yday(Time), month = month(Time))
df_plot %>%
group_by(date) %>%
filter(n_distinct(winter) == n_distinct(df_plot$winter))
ggplot(df_plot %>%
group_by(date) %>%
filter(n_distinct(winter) == n_distinct(df_plot$winter))) +
geom_path(aes(Temp, Depth_m, group = as.factor(date), col = (Temp))) +
scale_y_reverse() +
# theme(legend.position = "none") +
scale_color_gradientn(colors = rev(met.brewer("Hokusai1", n=100))) +
facet_wrap(~ winter + factor(month, levels = c(12,1,2,3,4)), ncol =  5)
ggplot(df %>% dplyr::filter(!is.na(winter)) %>% mutate(date = yday(dateTime), weekday = wday(dateTime)) %>%
group_by(winter, date, Depth_m) %>%
summarise(Temp = mean(Temp_C))) +
geom_path(aes(Temp, Depth_m, group = as.factor(date), col = (date))) +
scale_y_reverse() +
# theme(legend.position = "none") +
scale_color_gradientn(colors = met.brewer("Hokusai1", n=100)) +
facet_wrap(~ winter, ncol =  1)
ggplot(df %>% dplyr::filter(!is.na(winter)) %>% mutate(date = yday(dateTime), weekday = wday(dateTime)) %>%
group_by(winter, date, Depth_m) %>%
summarise(Temp = mean(Temp_C))) +
geom_point(aes(date, Depth_m)) +
scale_y_reverse() +
# theme(legend.position = "none") +
scale_color_gradientn(colors = met.brewer("Hokusai1", n=100)) +
facet_wrap(~ winter, ncol =  1)
df_day <- df %>%
# mutate(hour = hour(dateTime),
#        Time = as.POSIXct(paste0(as.Date(dateTime),' ', hour,':00:00'))) %>%
mutate(day = day(dateTime),
Time = as.Date(dateTime)) %>%
arrange(Time, Depth_m) %>%
group_by(Time, Depth_m) %>%
summarise(Temp = mean(Temp_C))
# df_day <- df %>%
#   mutate(hour = hour(dateTime),
#          Time = as.POSIXct(paste0(as.Date(dateTime),' ', hour,':00:00'))) %>%
#   # mutate(day = day(dateTime),
#          # Time = as.Date(dateTime)) %>%
#   arrange(Time, Depth_m) %>%
#   group_by(Time, Depth_m) %>%
#   summarise(Temp = mean(Temp_C))
dz = 0.1
depths = seq(0.15, max(df_day$Depth_m), dz)
df_temp = matrix(NA, nrow = length(unique(df_day$Time)), ncol = 1 + length(depths))
df_temp = as.data.frame(df_temp)
colnames(df_temp) = c('Time', depths)
df_temp$Time = as.Date(df_temp$Time)
conv.layer <- data.frame('Time' = NA,
'Buoydep' = NA,
'Convdep' = NA,
'energy' = NA,
'minT' = NA)
conv.layer$Time = as.Date(conv.layer$Time)
for (t in unique(df_day$Time)){
data = df_day %>%
filter(Time == t) %>%
arrange(Depth_m)
interpolated <- approx(data$Depth_m, data$Temp, seq(0.15,  max(df_day$Depth_m), dz) , rule = 2)
buoy.dep <- center.buoyancy(interpolated$y, interpolated$x)
idx = match(mean(data$Time),  unique(df_day$Time))
# df_temp[idx,] = c(mean(data$Time), interpolated$y)
df_temp$Time[idx] = as.Date(mean(data$Time))
df_temp[idx, 2:ncol(df_temp)] = interpolated$y
df.test = data.frame('depth' = interpolated$x,
'temp' = interpolated$y) %>%
mutate(            'density'= water.density( temp),
'diff.dens' = c(NA, diff(density)),
'diff.temp' = c(NA, diff(temp))) %>%
mutate(flag.dens = abs(diff.dens)< 1e-5,
flag.temp = abs(diff.temp) < 1e-3,
flag = ifelse(flag.dens == T & flag.temp == T, T, F))
if (any(na.omit(df.test$flag) == T)){
conv.layer.depth = df.test %>% filter(flag == T) %>%
summarise(max(depth))
} else {
conv.layer.depth = NA
}
bathymetry = approx.bathy(Zmax = 8, Zmean = 3.6, lkeArea = 4400, method = 'voldev', zinterval = dz)
energy = internal.energy(wtr = interpolated$y, depths=interpolated$x,
bthA = bathymetry$Area.at.z, bthD = bathymetry$depths)
conv.layer = rbind(conv.layer, data.frame('Time' = as.Date(mean(data$Time)),
'Buoydep' = buoy.dep,
'Convdep' = as.numeric(conv.layer.depth),
'energy' = energy,
'minT' = min(interpolated$y)))
}
all.dates <- seq(as.Date('2018-11-01'), as.Date('2021-05-31'), by = 1)
idx.dates <- which(all.dates %in% conv.layer$Time)
add.dates <- data.frame('Time' = all.dates[-idx.dates],
'Buoydep' = NA,
'Convdep' = NA,
'energy' = NA,
'minT' = NA)
conv.layer <- rbind(conv.layer, add.dates) %>% arrange(Time)
conv.layer = conv.layer %>%
mutate(doy = yday(Time), year = year(Time), month = month(Time))
conv.layer$winter = NA
conv.layer$winter[conv.layer$month >= 11 & conv.layer$year == 2018] = 'winter18-19'
conv.layer$winter[conv.layer$month <= 4 & conv.layer$year == 2019] = 'winter18-19'
conv.layer$winter[conv.layer$month >= 11 & conv.layer$year == 2019] = 'winter19-20'
conv.layer$winter[conv.layer$month <= 4 & conv.layer$year == 2020] = 'winter19-20'
conv.layer$winter[conv.layer$month >= 11 & conv.layer$year == 2020] = 'winter20-21'
conv.layer$winter[conv.layer$month <= 4 & conv.layer$year == 2021] = 'winter20-21'
ggplot(conv.layer %>% filter(!is.na(winter))) +
geom_point(aes(doy, energy)) +
facet_wrap(~ winter + factor(month, levels = c(10, 11,12,1,2,3,4,5,6)), ncol =  9, scales = 'free_x')
p1 <- ggplot(conv.layer %>% filter(!is.na(winter))) +
geom_line(aes(Time, energy, color = minT), linewidth = 1.5) +
facet_wrap(~ winter , ncol= 1, scales = 'free_x') +
scale_color_gradientn(colours = rev(RColorBrewer::brewer.pal(11, 'RdYlBu'))) +
ylab('Internal energy (J/m2)') + theme_bw()
ggsave(filename = 'figs/energy.png', plot = p1, width = 15, height = 20, units = 'cm')
dz = 0.1
depths = seq(0.15, max(df_day$Depth_m), dz)
df_temp = matrix(NA, nrow = length(unique(df_day$Time)), ncol = 1 + length(depths))
df_temp = as.data.frame(df_temp)
colnames(df_temp) = c('Time', depths)
df_temp$Time = as.Date(df_temp$Time)
conv.layer <- data.frame('Time' = NA,
'Buoydep' = NA,
'Convdep' = NA,
'energy' = NA,
'minT' = NA)
conv.layer$Time = as.Date(conv.layer$Time)
for (t in unique(df_day$Time)){
data = df_day %>%
filter(Time == t) %>%
arrange(Depth_m)
interpolated <- approx(data$Depth_m, data$Temp, seq(0.15,  max(df_day$Depth_m), dz) , rule = 2)
buoy.dep <- center.buoyancy(interpolated$y, interpolated$x)
idx = match(mean(data$Time),  unique(df_day$Time))
# df_temp[idx,] = c(mean(data$Time), interpolated$y)
df_temp$Time[idx] = as.Date(mean(data$Time))
df_temp[idx, 2:ncol(df_temp)] = interpolated$y
df.test = data.frame('depth' = interpolated$x,
'temp' = interpolated$y) %>%
mutate(            'density'= water.density( temp),
'diff.dens' = c(NA, diff(density)),
'diff.temp' = c(NA, diff(temp))) %>%
mutate(flag.dens = abs(diff.dens)< 1e-5,
flag.temp = abs(diff.temp) < 1e-3,
flag = ifelse(flag.dens == T & flag.temp == T, T, F))
if (any(na.omit(df.test$flag) == T)){
conv.layer.depth = df.test %>% filter(flag == T) %>%
summarise(max(depth))
} else {
conv.layer.depth = NA
}
bathymetry = approx.bathy(Zmax = 8, Zmean = 3.6, lkeArea = 4400, method = 'voldev', zinterval = dz)
energy = internal.energy(wtr = interpolated$y, depths=interpolated$x,
bthA = bathymetry$Area.at.z, bthD = bathymetry$depths)
conv.layer = rbind(conv.layer, data.frame('Time' = as.Date(mean(data$Time)),
'Buoydep' = buoy.dep,
'Convdep' = as.numeric(conv.layer.depth),
'energy' = energy,
'minT' = max(interpolated$y)))
}
all.dates <- seq(as.Date('2018-11-01'), as.Date('2021-05-31'), by = 1)
idx.dates <- which(all.dates %in% conv.layer$Time)
add.dates <- data.frame('Time' = all.dates[-idx.dates],
'Buoydep' = NA,
'Convdep' = NA,
'energy' = NA,
'minT' = NA)
conv.layer <- rbind(conv.layer, add.dates) %>% arrange(Time)
conv.layer = conv.layer %>%
mutate(doy = yday(Time), year = year(Time), month = month(Time))
conv.layer$winter = NA
conv.layer$winter[conv.layer$month >= 11 & conv.layer$year == 2018] = 'winter18-19'
conv.layer$winter[conv.layer$month <= 4 & conv.layer$year == 2019] = 'winter18-19'
conv.layer$winter[conv.layer$month >= 11 & conv.layer$year == 2019] = 'winter19-20'
conv.layer$winter[conv.layer$month <= 4 & conv.layer$year == 2020] = 'winter19-20'
conv.layer$winter[conv.layer$month >= 11 & conv.layer$year == 2020] = 'winter20-21'
conv.layer$winter[conv.layer$month <= 4 & conv.layer$year == 2021] = 'winter20-21'
ggplot(conv.layer %>% filter(!is.na(winter))) +
geom_point(aes(doy, energy)) +
facet_wrap(~ winter + factor(month, levels = c(10, 11,12,1,2,3,4,5,6)), ncol =  9, scales = 'free_x')
p1 <- ggplot(conv.layer %>% filter(!is.na(winter))) +
geom_line(aes(Time, energy, color = minT), linewidth = 1.5) +
facet_wrap(~ winter , ncol= 1, scales = 'free_x') +
scale_color_gradientn(colours = rev(RColorBrewer::brewer.pal(11, 'RdYlBu'))) +
ylab('Internal energy (J/m2)') + theme_bw()
p1 <- ggplot(conv.layer %>% filter(!is.na(winter))) +
geom_line(aes(Time, energy, color = minT), linewidth = 1.5) +
facet_wrap(~ winter , ncol= 1, scales = 'free_x') +
scale_color_gradientn(colours = rev(RColorBrewer::brewer.pal(11, 'RdYlBu'))) +
geom_vline(aes(xintercept= Time[minT == 4]), col = "red") +
ylab('Internal energy (J/m2)') + theme_bw()
p1 <- ggplot(conv.layer %>% filter(!is.na(winter))) +
geom_line(aes(Time, energy, color = minT), linewidth = 1.5) +
facet_wrap(~ winter , ncol= 1, scales = 'free_x') +
scale_color_gradientn(colours = rev(RColorBrewer::brewer.pal(11, 'RdYlBu'))) +
geom_vline(aes(xintercept= Time[minT == 4]), col = "red") +
ylab('Internal energy (J/m2)') + theme_bw(); p1
conv.layer$Time[conv.layer$minT == 4]
conv.layer$Time[which(conv.layer$minT == 4)]
conv.layer$minT == 4
p1 <- ggplot(conv.layer %>% filter(!is.na(winter))) +
geom_line(aes(Time, energy, color = minT), linewidth = 1.5) +
facet_wrap(~ winter , ncol= 1, scales = 'free_x') +
scale_color_gradientn(colours = rev(RColorBrewer::brewer.pal(11, 'RdYlBu'))) +
# geom_vline(aes(xintercept= Time[minT == 4]), col = "red") +
ylab('Internal energy (J/m2)') + theme_bw(); p1
dz = 0.1
depths = seq(0.15, max(df_day$Depth_m), dz)
df_temp = matrix(NA, nrow = length(unique(df_day$Time)), ncol = 1 + length(depths))
df_temp = as.data.frame(df_temp)
colnames(df_temp) = c('Time', depths)
df_temp$Time = as.Date(df_temp$Time)
conv.layer <- data.frame('Time' = NA,
'Buoydep' = NA,
'Convdep' = NA,
'energy' = NA,
'minT' = NA)
conv.layer$Time = as.Date(conv.layer$Time)
for (t in unique(df_day$Time)){
data = df_day %>%
filter(Time == t) %>%
arrange(Depth_m)
interpolated <- approx(data$Depth_m, data$Temp, seq(0.15,  max(df_day$Depth_m), dz) , rule = 2)
buoy.dep <- center.buoyancy(interpolated$y, interpolated$x)
idx = match(mean(data$Time),  unique(df_day$Time))
# df_temp[idx,] = c(mean(data$Time), interpolated$y)
df_temp$Time[idx] = as.Date(mean(data$Time))
df_temp[idx, 2:ncol(df_temp)] = interpolated$y
df.test = data.frame('depth' = interpolated$x,
'temp' = interpolated$y) %>%
mutate(            'density'= water.density( temp),
'diff.dens' = c(NA, diff(density)),
'diff.temp' = c(NA, diff(temp))) %>%
mutate(flag.dens = abs(diff.dens)< 1e-5,
flag.temp = abs(diff.temp) < 1e-3,
flag = ifelse(flag.dens == T & flag.temp == T, T, F))
if (any(na.omit(df.test$flag) == T)){
conv.layer.depth = df.test %>% filter(flag == T) %>%
summarise(max(depth))
} else {
conv.layer.depth = NA
}
bathymetry = approx.bathy(Zmax = 8, Zmean = 3.6, lkeArea = 4400, method = 'voldev', zinterval = dz)
energy = internal.energy(wtr = interpolated$y, depths=interpolated$x,
bthA = bathymetry$Area.at.z, bthD = bathymetry$depths)
conv.layer = rbind(conv.layer, data.frame('Time' = as.Date(mean(data$Time)),
'Buoydep' = buoy.dep,
'Convdep' = as.numeric(conv.layer.depth),
'energy' = energy,
'minT' = min(interpolated$y)))
}
all.dates <- seq(as.Date('2018-11-01'), as.Date('2021-05-31'), by = 1)
idx.dates <- which(all.dates %in% conv.layer$Time)
add.dates <- data.frame('Time' = all.dates[-idx.dates],
'Buoydep' = NA,
'Convdep' = NA,
'energy' = NA,
'minT' = NA)
conv.layer <- rbind(conv.layer, add.dates) %>% arrange(Time)
conv.layer = conv.layer %>%
mutate(doy = yday(Time), year = year(Time), month = month(Time))
conv.layer$winter = NA
conv.layer$winter[conv.layer$month >= 11 & conv.layer$year == 2018] = 'winter18-19'
conv.layer$winter[conv.layer$month <= 4 & conv.layer$year == 2019] = 'winter18-19'
conv.layer$winter[conv.layer$month >= 11 & conv.layer$year == 2019] = 'winter19-20'
conv.layer$winter[conv.layer$month <= 4 & conv.layer$year == 2020] = 'winter19-20'
conv.layer$winter[conv.layer$month >= 11 & conv.layer$year == 2020] = 'winter20-21'
conv.layer$winter[conv.layer$month <= 4 & conv.layer$year == 2021] = 'winter20-21'
ggplot(conv.layer %>% filter(!is.na(winter))) +
geom_point(aes(doy, energy)) +
facet_wrap(~ winter + factor(month, levels = c(10, 11,12,1,2,3,4,5,6)), ncol =  9, scales = 'free_x')
p1 <- ggplot(conv.layer %>% filter(!is.na(winter))) +
geom_line(aes(Time, energy, color = minT), linewidth = 1.5) +
facet_wrap(~ winter , ncol= 1, scales = 'free_x') +
scale_color_gradientn(colours = rev(RColorBrewer::brewer.pal(11, 'RdYlBu'))) +
# geom_vline(aes(xintercept= Time[minT == 4]), col = "red") +
ylab('Internal energy (J/m2)') + theme_bw(); p1
p1 <- ggplot(conv.layer %>% filter(!is.na(winter))) +
geom_line(aes(Time, energy, color = minT), linewidth = 1.5) +
facet_wrap(~ winter , ncol= 1, scales = 'free_x') +
scale_color_gradientn(colours = rev(RColorBrewer::brewer.pal(11, 'RdYlBu'))) +
geom_vline(aes(xintercept= Time[minT == 4]), col = "red") +
ylab('Internal energy (J/m2)') + theme_bw(); p1
p1 <- ggplot(conv.layer %>% filter(!is.na(winter))) +
geom_line(aes(Time, energy, color = minT), linewidth = 1.5) +
facet_wrap(~ winter , ncol= 1, scales = 'free_x') +
scale_color_gradientn(colours = rev(RColorBrewer::brewer.pal(11, 'RdYlBu'))) +
geom_vline(aes(xintercept= Time[which(minT == 4)]), col = "red") +
ylab('Internal energy (J/m2)') + theme_bw(); p1
conv.layer$Time[which(conv.layer$minT == 4)]
conv.layer$minT == 4
which(conv.layer$minT == 4)
which(abs(conv.layer$minT - 4 < 1e-1))
which(abs(conv.layer$minT - 4 < 1))
which(abs(conv.layer$minT - 4) < 0.5)
which(abs(conv.layer$minT - 4) < 0.1)
which(abs(conv.layer$minT - 4) < 0.01)
p1 <- ggplot(conv.layer %>% filter(!is.na(winter))) +
geom_line(aes(Time, energy, color = minT), linewidth = 1.5) +
facet_wrap(~ winter , ncol= 1, scales = 'free_x') +
scale_color_gradientn(colours = rev(RColorBrewer::brewer.pal(11, 'RdYlBu'))) +
geom_vline(aes(xintercept= Time[ which(abs(conv.layer$minT - 4) < 0.01)]), col = "red") +
ylab('Internal energy (J/m2)') + theme_bw(); p1
conv.layer$Time[ which(abs(conv.layer$minT - 4) < 0.01)]
str(Time[ which(abs(conv.layer$minT - 4) < 0.01)])
str(conv.layer$Time[ which(abs(conv.layer$minT - 4) < 0.01)])
p1 <- ggplot(conv.layer %>% filter(!is.na(winter))) +
geom_line(aes(Time, energy, color = minT), linewidth = 1.5) +
facet_wrap(~ winter , ncol= 1, scales = 'free_x') +
scale_color_gradientn(colours = rev(RColorBrewer::brewer.pal(11, 'RdYlBu'))) +
geom_vline(aes(xintercept= Time[ which(abs(minT - 4) < 0.01)]), col = "red") +
ylab('Internal energy (J/m2)') + theme_bw(); p1
str(conv.layer)
p1 <- ggplot(conv.layer %>% filter(!is.na(winter))) +
geom_line(aes(Time, energy, color = minT), linewidth = 1.5) +
facet_wrap(~ winter , ncol= 1, scales = 'free_x') +
scale_color_gradientn(colours = rev(RColorBrewer::brewer.pal(11, 'RdYlBu'))) +
geom_vline(aes(xintercept= as.numeric(Time[ which(abs(minT - 4) < 0.01)])), col = "red") +
ylab('Internal energy (J/m2)') + theme_bw(); p1
p1 <- ggplot(conv.layer %>% filter(!is.na(winter))) +
geom_line(aes(Time, energy, color = minT), linewidth = 1.5) +
facet_wrap(~ winter , ncol= 1, scales = 'free_x') +
scale_color_gradientn(colours = rev(RColorBrewer::brewer.pal(11, 'RdYlBu'))) +
geom_vline(aes(xintercept= conv.layer$Time[ which(abs(conv.layer$minT - 4) < 0.01)]), col = "red") +
ylab('Internal energy (J/m2)') + theme_bw(); p1
conv.layer$Time[ which(abs(conv.layer$minT - 4) < 0.01)]
p1 <- ggplot(conv.layer %>% filter(!is.na(winter))) +
geom_line(aes(Time, energy, color = minT), linewidth = 1.5) +
facet_wrap(~ winter , ncol= 1, scales = 'free_x') +
scale_color_gradientn(colours = rev(RColorBrewer::brewer.pal(11, 'RdYlBu'))) +
geom_vline((xintercept= conv.layer$Time[ which(abs(conv.layer$minT - 4) < 0.01)]), col = "red") +
ylab('Internal energy (J/m2)') + theme_bw(); p1
p1 <- ggplot(conv.layer %>% filter(!is.na(winter))) +
geom_line(aes(Time, energy, color = minT), linewidth = 1.5) +
facet_wrap(~ winter , ncol= 1, scales = 'free_x') +
scale_color_gradientn(colours = rev(RColorBrewer::brewer.pal(11, 'RdYlBu'))) +
geom_vline(xintercept= conv.layer$Time[ which(abs(conv.layer$minT - 4) < 0.01)], col = "red") +
ylab('Internal energy (J/m2)') + theme_bw(); p1
conv.layer = conv.layer %>%
mutate(doy = yday(Time), year = year(Time), month = month(Time))
conv.layer$winter = NA
conv.layer$winter[conv.layer$month >= 11 & conv.layer$year == 2018] = 'winter18-19'
conv.layer$winter[conv.layer$month <= 5 & conv.layer$year == 2019] = 'winter18-19'
conv.layer$winter[conv.layer$month >= 11 & conv.layer$year == 2019] = 'winter19-20'
conv.layer$winter[conv.layer$month <= 5 & conv.layer$year == 2020] = 'winter19-20'
conv.layer$winter[conv.layer$month >= 11 & conv.layer$year == 2020] = 'winter20-21'
conv.layer$winter[conv.layer$month <= 5 & conv.layer$year == 2021] = 'winter20-21'
ggplot(conv.layer %>% filter(!is.na(winter))) +
geom_point(aes(doy, energy)) +
facet_wrap(~ winter + factor(month, levels = c(10, 11,12,1,2,3,4,5,6)), ncol =  9, scales = 'free_x')
p1 <- ggplot(conv.layer %>% filter(!is.na(winter))) +
geom_line(aes(Time, energy, color = minT), linewidth = 1.5) +
facet_wrap(~ winter , ncol= 1, scales = 'free_x') +
scale_color_gradientn(colours = rev(RColorBrewer::brewer.pal(11, 'RdYlBu'))) +
geom_vline(xintercept= conv.layer$Time[ which(abs(conv.layer$minT - 4) < 0.01)], col = "red") +
ylab('Internal energy (J/m2)') + theme_bw(); p1
ggsave(filename = 'figs/energy.png', plot = p1, width = 15, height = 20, units = 'cm')
