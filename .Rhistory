plot_label
ts1 <- ggplot(m_df_timeseries %>% filter(variable == 0.75 & !is.na(winter))) +
geom_line(aes(datetime, value, color = winter)) +
ylab('Water temperature (\u00B0C)') +
scale_x_discrete(labels= plot_label) +
ggtitle("0.75 m depth") +
theme_bw() +theme(legend.position = "bottom"); ts1
plot_label
str(m_df_timeseries)
ts1 <- ggplot(m_df_timeseries %>% filter(variable == 0.75 & !is.na(winter))) +
geom_line(aes(datetime, value, color = winter)) +
ylab('Water temperature (\u00B0C)') +
scale_x_continuous(labels= plot_label) +
ggtitle("0.75 m depth") +
theme_bw() +theme(legend.position = "bottom"); ts1
seq(1, lenght(m_df_timeseries), 5)
seq(1, length(m_df_timeseries), 5)
seq(1, length(m_df_timeseries$datetime), 5)
seq(1, length(m_df_timeseries$datetime), 1000)
seq(1, length(m_df_timeseries$datetime), 10000)
seq(1, length(m_df_timeseries$datetime), 100000)
plot_label = (format(m_df_timeseries$Time, format ='%m-%d %H:00:00') )
plot_breaks = seq(1, length(m_df_timeseries$datetime), 100000)
ts1 <- ggplot(m_df_timeseries %>% filter(variable == 0.75 & !is.na(winter))) +
geom_line(aes(datetime, value, color = winter)) +
ylab('Water temperature (\u00B0C)') +
scale_x_continuous(breaks = plot_breaks,labels= plot_label[plot_breaks]) +
ggtitle("0.75 m depth") +
theme_bw() +theme(legend.position = "bottom"); ts1
plot_label[plot_breaks]
?scale_x_continuous
plot_label[plot_breaks]
ggplot(m_df_timeseries %>% filter(variable == 0.75 & !is.na(winter))) +
geom_line(aes(datetime, value, color = winter)) +
ylab('Water temperature (\u00B0C)') +
scale_x_continuous(breaks = plot_breaks,labels= plot_label[plot_breaks])
str(m_df_timeseries %>% filter(variable == 0.75 & !is.na(winter)))
ts1 <- ggplot(m_df_timeseries %>% filter(variable == 0.75 & !is.na(winter))) +
geom_line(aes(datetime, value, color = winter)) +
ylab('Water temperature (\u00B0C)') +
scale_x_continuous(breaks = plot_breaks,labels= plot_label[plot_breaks]) +
ggtitle("0.75 m depth") +
theme_bw() +theme(legend.position = "bottom"); ts1
ts1 <- ggplot(m_df_timeseries %>% filter(variable == 0.75 & !is.na(winter)), aes(datetime, value, color = winter)) +
geom_line() +
ylab('Water temperature (\u00B0C)') +
scale_x_continuous(breaks = plot_breaks,labels= plot_label[plot_breaks]) +
ggtitle("0.75 m depth") +
theme_bw() +theme(legend.position = "bottom"); ts1
mpg
str(mpg)
length(plot_breaks)
length(plot_label[plot_breaks])
plot_breaks
plot_label[plot_breaks]
ggplot(m_df_timeseries %>% filter(variable == 0.75 & !is.na(winter)), aes(datetime, value, color = winter)) +
geom_line() +
ylab('Water temperature (\u00B0C)') +
scale_x_continuous(breaks = plot_breaks,labels= plot_label[plot_breaks])
ts1 <- ggplot(m_df_timeseries %>% filter(variable == 0.75 & !is.na(winter)), aes(datetime, value, color = winter)) +
geom_line() +
ylab('Water temperature (\u00B0C)') +
scale_x_continuous(breaks = plot_breaks) + #,labels= plot_label[plot_breaks]) +
ggtitle("0.75 m depth") +
theme_bw() +theme(legend.position = "bottom"); ts1
str(m_df_timeseries$datetime)
plot_datetime = m_df_timeseries$datetime
ts1 <- ggplot(m_df_timeseries %>% filter(variable == 0.75 & !is.na(winter)), aes(datetime, value, color = winter)) +
geom_line() +
ylab('Water temperature (\u00B0C)') +
scale_x_continuous(breaks = plot_datetime[plot_breaks],labels= plot_label[plot_breaks]) +
ggtitle("0.75 m depth") +
theme_bw() +theme(legend.position = "bottom"); ts1
plot_datetime
plot_datetime[plot_breaks]
diff(plot_datetime[plot_breaks])
plot_breaks
plot(plot_datetime)
m_df_timeseries = m.df %>%
mutate(doy = yday(Time),
date_noyear = (format((Time), format ='%m-%d %H:00:00')),
day = day(Time),
hour = hour(Time),
week = week(Time),
datetime = as.numeric(Time),#ifelse(month > 6, lubridate::make_datetime(2020, month, day, hour, 0, 0), lubridate::make_datetime(2021, month, day, hour, 0, 0)),
plot_label = (format(Time, format ='%m-%d %H:00:00') ))
str(m_df_timeseries)
plot_datetime = m_df_timeseries$datetime
plot_label = (format(m_df_timeseries$Time, format ='%m-%d %H:00:00') )
plot_breaks = seq(1, length(m_df_timeseries$datetime), 100000)
ts1 <- ggplot(m_df_timeseries %>% filter(variable == 0.75 & !is.na(winter)), aes(datetime, value, color = winter)) +
geom_line() +
ylab('Water temperature (\u00B0C)') +
scale_x_continuous(breaks = plot_datetime[plot_breaks],labels= plot_label[plot_breaks]) +
ggtitle("0.75 m depth") +
theme_bw() +theme(legend.position = "bottom"); ts1
m_df_timeseries = m.df %>%
mutate(doy = yday(Time),
date_noyear = (format((Time), format ='%m-%d %H:00:00')),
day = day(Time),
hour = hour(Time),
week = week(Time),
datetime = ifelse(month > 6, lubridate::make_datetime(2020, month, day, hour, 0, 0), lubridate::make_datetime(2021, month, day, hour, 0, 0)),
plot_label = (format(Time, format ='%m-%d %H:00:00') ))
plot(m_df_timeseries$datetime)
plot_datetime = m_df_timeseries$datetime
plot_breaks = seq(min(plot_datetime), max(plot_datetime), 100000)
plot_breaks
max(plot_datetime)
min(plot_datetime),
min(plot_datetime)
plot_breaks = seq(min(plot_datetime), max(plot_datetime), 10000000)
plot_breaks
plot_breaks = seq(min(plot_datetime), max(plot_datetime), 1000000)
plot_breaks
plot_datetime = m_df_timeseries$datetime
plot_label = (format(m_df_timeseries$Time, format ='%m-%d %H:00:00') )
plot_breaks = seq(min(plot_datetime), max(plot_datetime), 1000000)
ts1 <- ggplot(m_df_timeseries %>% filter(variable == 0.75 & !is.na(winter)), aes(datetime, value, color = winter)) +
geom_line() +
ylab('Water temperature (\u00B0C)') +
scale_x_continuous(breaks = plot_datetime[plot_breaks],labels= plot_label[plot_breaks]) +
ggtitle("0.75 m depth") +
theme_bw() +theme(legend.position = "bottom"); ts1
plot_datetime[plot_breaks]
plot_label[plot_breaks]
plot_breaks
plot_label
plot_breaks
plot_label[plot_breaks]
match(plot_breaks, plot_datetime)
plot_breaks
diff(plot_breaks)
plot_breaks[1] %in% plot_datetime
plot_breaks[5] %in% plot_datetime
plot_breaks = cut(plot_datetime, 6)
plot_breaks
?cut
plot_breaks = seq(min(plot_datetime), max(plot_datetime), 1000000)
plot_breaks
as.POSIXct(plot_breaks)
as.POSIXct(plot_breaks, origin = '1979-01-01')
as.POSIXct(plot_breaks, origin = '1970-01-01')
m_df_timeseries = m.df %>%
mutate(doy = yday(Time),
date_noyear = (format((Time), format ='%m-%d %H:00:00')),
day = day(Time),
hour = hour(Time),
week = week(Time),
datetime = ifelse(month > 6, lubridate::make_datetime(2020, month, day, hour, 0, 0), lubridate::make_datetime(2021, month, day, hour, 0, 0)),
plot_label = (format(Time, format ='%m-%d %H:00:00') )) %>%
filter(!is.na(winter))
plot_datetime = m_df_timeseries$datetime
plot_label = (format(m_df_timeseries$Time, format ='%m-%d %H:00:00') )
plot_breaks = seq(min(plot_datetime), max(plot_datetime), 1000000)
match(plot_breaks, plot_datetime)
plot_breaks
as.POSIXct((plot_breaks), origin='1970-01-01')
format(as.POSIXct((plot_breaks), origin='1970-01-01')  format ='%m-%d %H:00:00')
format(as.POSIXct((plot_breaks), origin='1970-01-01'),  format ='%m-%d %H:00:00')
# plot_label = (format(m_df_timeseries$Time, format ='%m-%d %H:00:00') )
plot_breaks = seq(min(plot_datetime), max(plot_datetime), 1000000)
plot_label = format(as.POSIXct((plot_breaks), origin='1970-01-01'),  format ='%m-%d %H:00:00')
match(plot_breaks, plot_datetime)
ts1 <- ggplot(m_df_timeseries %>% filter(variable == 0.75), aes(datetime, value, color = winter)) +
geom_line() +
ylab('Water temperature (\u00B0C)') +
scale_x_continuous(breaks = plot_breaks,labels= plot_label[plot_breaks]) +
ggtitle("0.75 m depth") +
theme_bw() +theme(legend.position = "bottom"); ts1
ts1 <- ggplot(m_df_timeseries %>% filter(variable == 0.75), aes(datetime, value, color = winter)) +
geom_line() +
ylab('Water temperature (\u00B0C)') +
scale_x_continuous(breaks = plot_breaks,labels= plot_label) +
ggtitle("0.75 m depth") +
theme_bw() +theme(legend.position = "bottom"); ts1
ts2 <- ggplot(m_df_timeseries %>% filter(variable == 1.55 )) +
geom_line(aes(datetime, value, color = winter)) +
scale_x_continuous(breaks = plot_breaks,labels= plot_label) +
ylab('Water temperature (\u00B0C)') +
ggtitle("1.55 m depth") +
theme_bw() +theme(legend.position = "bottom")
ts2
ts1 <- ggplot(m_df_timeseries %>% filter(variable == 0.75), aes(datetime, value, color = winter)) +
geom_line() +
ylab('Water temperature (\u00B0C)') +
scale_x_continuous(breaks = plot_breaks,labels= plot_label) +
ggtitle("0.75 m depth") +
theme_bw() +theme(legend.position = "bottom"); ts1
ts2 <- ggplot(m_df_timeseries %>% filter(variable == 1.55 )) +
geom_line(aes(datetime, value, color = winter)) +
scale_x_continuous(breaks = plot_breaks,labels= plot_label) +
ylab('Water temperature (\u00B0C)') +
ggtitle("1.55 m depth") +
theme_bw() +theme(legend.position = "bottom")
ts3 <- ggplot(m_df_timeseries %>% filter(variable == 2.55 )) +
scale_x_continuous(breaks = plot_breaks,labels= plot_label) +
geom_line(aes(datetime, value, color = winter)) +
ylab('Water temperature (\u00B0C)') +
ggtitle("2.55 m depth") +
theme_bw() +theme(legend.position = "bottom")
ts4 <- ggplot(m_df_timeseries %>% filter(variable == 3.05)) +
scale_x_continuous(breaks = plot_breaks,labels= plot_label) +
geom_line(aes(datetime, value, color = winter)) +
ylab('Water temperature (\u00B0C)') +
ggtitle("3.05 m depth") +
theme_bw() +theme(legend.position = "bottom")
ts5 <- ggplot(m_df_timeseries %>% filter(variable == 7.45 )) +
scale_x_continuous(breaks = plot_breaks,labels= plot_label) +
geom_line(aes(datetime, value, color = winter)) +
ylab('Water temperature (\u00B0C)') +
ggtitle("7.45 m depth") +
theme_bw() +theme(legend.position = "bottom")
p3=ts1/ts2/ts3/ts4/ts5 +plot_layout(guides = "collect") & theme(legend.position = 'bottom')& plot_annotation(tag_levels = 'A');p3
ggsave(filename = 'figs/wtemptimeseries.png', plot = p1, width = 30, height = 40, units = 'cm')
ggsave(filename = 'figs/wtemptimeseries.png', plot = p3, width = 30, height = 40, units = 'cm')
ts5 <- ggplot(m_df_timeseries %>% filter(variable == 7.45 )) +
scale_x_continuous(breaks = plot_breaks,labels= plot_label) +
geom_line(aes(datetime, value, color = winter)) +
ylab('Water temperature (\u00B0C)') +
ggtitle("7.45 m depth") +
theme_bw() +theme(legend.position = "bottom", axis.text.x = element_text9angle = 90, vjust = 0.5, hjust = 1)
ts5 <- ggplot(m_df_timeseries %>% filter(variable == 7.45 )) +
scale_x_continuous(breaks = plot_breaks,labels= plot_label) +
geom_line(aes(datetime, value, color = winter)) +
ylab('Water temperature (\u00B0C)') +
ggtitle("7.45 m depth") +
theme_bw() +theme(legend.position = "bottom", axis.text.x = element_text_angle = 90, vjust = 0.5, hjust = 1)
ts5 <- ggplot(m_df_timeseries %>% filter(variable == 7.45 )) +
scale_x_continuous(breaks = plot_breaks,labels= plot_label) +
geom_line(aes(datetime, value, color = winter)) +
ylab('Water temperature (\u00B0C)') +
ggtitle("7.45 m depth") +
theme_bw() +theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
ts5
eseries %>% filter(variable == 0.75), aes(datetime, value, color = winter)) +
ts1 <- ggplot(m_df_timeseries %>% filter(variable == 0.75), aes(datetime, value, color = winter)) +
geom_line() +
ylab('Water temperature (\u00B0C)') +
scale_x_continuous(breaks = plot_breaks,labels= plot_label) +
ggtitle("0.75 m depth") +
theme_bw() +theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, vjust = 0.5, hjust = 1)); ts1
ts2 <- ggplot(m_df_timeseries %>% filter(variable == 1.55 )) +
geom_line(aes(datetime, value, color = winter)) +
scale_x_continuous(breaks = plot_breaks,labels= plot_label) +
ylab('Water temperature (\u00B0C)') +
ggtitle("1.55 m depth") +
theme_bw() +theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, vjust = 0.5, hjust = 1))
ts3 <- ggplot(m_df_timeseries %>% filter(variable == 2.55 )) +
scale_x_continuous(breaks = plot_breaks,labels= plot_label) +
geom_line(aes(datetime, value, color = winter)) +
ylab('Water temperature (\u00B0C)') +
ggtitle("2.55 m depth") +
theme_bw() +theme(legend.position = "bottom" ,axis.text.x = element_text(angle = 45, vjust = 0.5, hjust = 1))
ts4 <- ggplot(m_df_timeseries %>% filter(variable == 3.05)) +
scale_x_continuous(breaks = plot_breaks,labels= plot_label) +
geom_line(aes(datetime, value, color = winter)) +
ylab('Water temperature (\u00B0C)') +
ggtitle("3.05 m depth") +
theme_bw() +theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, vjust = 0.5, hjust = 1))
ts5 <- ggplot(m_df_timeseries %>% filter(variable == 7.45 )) +
scale_x_continuous(breaks = plot_breaks,labels= plot_label) +
geom_line(aes(datetime, value, color = winter)) +
ylab('Water temperature (\u00B0C)') +
ggtitle("7.45 m depth") +
theme_bw() +theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, vjust = 0.5, hjust = 1))
p3=ts1/ts2/ts3/ts4/ts5 +plot_layout(guides = "collect") & theme(legend.position = 'bottom')& plot_annotation(tag_levels = 'A');p3
ggsave(filename = 'figs/wtemptimeseries.png', plot = p3, width = 30, height = 40, units = 'cm')
ts1 <- ggplot(m_df_timeseries %>% filter(variable == 0.75), aes(datetime, value, color = winter)) +
geom_line() +
ylab('Water temperature (\u00B0C)') +
scale_x_continuous(breaks = plot_breaks,labels= plot_label) +
ggtitle("0.75 m depth") +
theme_bw() +theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, vjust = 0.5, hjust = 1), axis.title.x = element_blank()); ts1
ts1 <- ggplot(m_df_timeseries %>% filter(variable == 0.75), aes(datetime, value, color = winter)) +
geom_line() +
ylab('Water temperature (\u00B0C)') +
scale_x_continuous(breaks = plot_breaks,labels= plot_label) +
ggtitle("0.75 m depth") +
theme_bw() +theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, vjust = 0.5, hjust = 1), axis.title.x = element_blank()); ts1
ts2 <- ggplot(m_df_timeseries %>% filter(variable == 1.55 )) +
geom_line(aes(datetime, value, color = winter)) +
scale_x_continuous(breaks = plot_breaks,labels= plot_label) +
ylab('Water temperature (\u00B0C)') +
ggtitle("1.55 m depth") +
theme_bw() +theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, vjust = 0.5, hjust = 1), axis.title.x = element_blank())
ts3 <- ggplot(m_df_timeseries %>% filter(variable == 2.55 )) +
scale_x_continuous(breaks = plot_breaks,labels= plot_label) +
geom_line(aes(datetime, value, color = winter)) +
ylab('Water temperature (\u00B0C)') +
ggtitle("2.55 m depth") +
theme_bw() +theme(legend.position = "bottom" ,axis.text.x = element_text(angle = 45, vjust = 0.5, hjust = 1), axis.title.x = element_blank())
ts4 <- ggplot(m_df_timeseries %>% filter(variable == 3.05)) +
scale_x_continuous(breaks = plot_breaks,labels= plot_label) +
geom_line(aes(datetime, value, color = winter)) +
ylab('Water temperature (\u00B0C)') +
ggtitle("3.05 m depth") +
theme_bw() +theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, vjust = 0.5, hjust = 1), axis.title.x = element_blank())
ts5 <- ggplot(m_df_timeseries %>% filter(variable == 7.45 )) +
scale_x_continuous(breaks = plot_breaks,labels= plot_label) +
geom_line(aes(datetime, value, color = winter)) +
ylab('Water temperature (\u00B0C)') +
ggtitle("7.45 m depth") +
theme_bw() +theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, vjust = 0.5, hjust = 1), axis.title.x = element_blank())
p3=ts1/ts2/ts3/ts4/ts5 +plot_layout(guides = "collect") & theme(legend.position = 'bottom')& plot_annotation(tag_levels = 'A');p3
ggsave(filename = 'figs/wtemptimeseries.png', plot = p3, width = 30, height = 40, units = 'cm')
conv.layer = read.csv("output/interpolated_hourly_convective.csv")
all.dates <- seq(as.Date('2018-11-01 00:00:00'), as.Date('2021-05-31 00:00:00'), by = 1)
idx.dates <- which(all.dates %in% conv.layer$Time)
add.dates <- data.frame('Time' = all.dates[-idx.dates],
'Buoydep' = NA,
'Convdep' = NA,
'energy' = NA,
'minT' = NA)
conv.layer
conv.layer
conv.layer = read.csv("output/interpolated_hourly_convective.csv")
conv.layer
#CHECK HOURLY
df_hour <- df %>%
# mutate(hour = hour(dateTime),
#        Time = as.POSIXct(paste0(as.Date(dateTime),' ', hour,':00:00'))) %>%
mutate(hour = hour(dateTime),
Time = (dateTime),
Dateie = as.Date(Time),
Date = as.POSIXct(paste0(Dateie,' ',hour,':00:00'))) %>%
group_by(Date, Depth_m) %>%
arrange(Depth_m) %>%
summarise(Temp = mean(Temp_C)) %>%
select(Date, Depth_m, Temp)
dz = 0.1
depths = seq(0.15, max(df_hour$Depth_m), dz)
df_temp = matrix(NA, nrow = length(unique(df_hour$Date)), ncol = 1 + length(depths))
df_temp = as.data.frame(df_temp)
colnames(df_temp) = c('Time', depths)
conv.layer <- data.frame('Time' = NA,
'Buoydep' = NA,
'Convdep' = NA,
'energy' = NA,
'minT' = NA)
conv.layer$Time = as.Date(conv.layer$Time)
for (t in unique(df_hour$Date)){
print(round((match(t, unique(df_hour$Date)) * 100)/length( unique(df_hour$Date))),2)
data = df_hour %>%
filter(Date == t) %>%
arrange(Depth_m)
if (nrow(data) <2){
next
}
interpolated <- approx(data$Depth_m, data$Temp, seq(0.15,  max(df_hour$Depth_m), dz) , rule = 2)
buoy.dep <- center.buoyancy(interpolated$y, interpolated$x)
idx = match(mean(data$Date),  unique(df_hour$Date))
# df_temp[idx,] = c(mean(data$Time), interpolated$y)
df_temp$Time[idx] = as.Date(mean(data$Date))
df_temp[idx, 2:ncol(df_temp)] = interpolated$y
df.test = data.frame('depth' = interpolated$x,
'temp' = interpolated$y) %>%
mutate(            'density'= water.density( temp),
'diff.dens' = c(NA, diff(density)),
'diff.temp' = c(NA, diff(temp))) %>%
mutate(flag.dens = abs(diff.dens)< 1e-5,
flag.temp = abs(diff.temp) < 1e-3,
flag = ifelse(flag.dens == T & flag.temp == T, T, F))
if (any(na.omit(df.test$flag) == T)){
conv.layer.depth = df.test %>% filter(flag == T) %>%
summarise(max(depth))
} else {
conv.layer.depth = NA
}
bathymetry = approx.bathy(Zmax = 8, Zmean = 3.6, lkeArea = 4400, method = 'voldev', zinterval = dz)
energy = internal.energy(wtr = interpolated$y, depths=interpolated$x,
bthA = bathymetry$Area.at.z, bthD = bathymetry$depths)
conv.layer = rbind(conv.layer, data.frame('Time' = as.Date(mean(data$Date)),
'Buoydep' = buoy.dep,
'Convdep' = as.numeric(conv.layer.depth),
'energy' = energy,
'minT' = min(interpolated$y)))
}
# write.csv(x = df_temp, file = 'output/interpolated_hourly_wtemp.csv', quote = F, row.names = F)
write.csv(x = conv.layer, file = 'output/interpolated_hourly_convective.csv', quote = F, row.names = F)
conv.layer = read.csv("output/interpolated_hourly_convective.csv")
all.dates <- seq(as.Date('2018-11-01 00:00:00'), as.Date('2021-05-31 00:00:00'), by = 1)
idx.dates <- which(all.dates %in% conv.layer$Time)
add.dates <- data.frame('Time' = all.dates[-idx.dates],
'Buoydep' = NA,
'Convdep' = NA,
'energy' = NA,
'minT' = NA)
conv.layer
str(conv.layer)
str(add.dates)
all.dates <- seq(as.POSIXct('2018-11-01 00:00:00'), as.POSIXct('2021-05-31 00:00:00'), by = 1)
idx.dates <- which(all.dates %in% conv.layer$Time)
add.dates <- data.frame('Time' = all.dates[-idx.dates],
'Buoydep' = NA,
'Convdep' = NA,
'energy' = NA,
'minT' = NA)
str(add.dates)
all.dates
all.dates <- seq(as.POSIXct('2018-11-01 00:00:00'), as.POSIXct('2021-05-31 00:00:00'), by = 3600)
all.dates
idx.dates <- which(all.dates %in% conv.layer$Time)
add.dates <- data.frame('Time' = all.dates[-idx.dates],
'Buoydep' = NA,
'Convdep' = NA,
'energy' = NA,
'minT' = NA)
idx.dates
str(conv.layer)
conv.layer = read.csv("output/interpolated_hourly_convective.csv") %>% mutate(Time = as.POSIXct(Time))
all.dates <- seq(as.POSIXct('2018-11-01 00:00:00'), as.POSIXct('2021-05-31 00:00:00'), by = 3600)
idx.dates <- which(all.dates %in% conv.layer$Time)
add.dates <- data.frame('Time' = all.dates[-idx.dates],
'Buoydep' = NA,
'Convdep' = NA,
'energy' = NA,
'minT' = NA)
add.dates
conv.layer <- rbind(conv.layer, add.dates) %>% arrange(Time)
conv.layer = conv.layer %>%
mutate(doy = yday(Time), year = year(Time), month = month(Time))
conv.layer$winter = NA
conv.layer$winter[conv.layer$month >= 11 & conv.layer$year == 2018] = 'winter18-19'
conv.layer$winter[conv.layer$month <= 5 & conv.layer$year == 2019] = 'winter18-19'
conv.layer$winter[conv.layer$month >= 11 & conv.layer$year == 2019] = 'winter19-20'
conv.layer$winter[conv.layer$month <= 5 & conv.layer$year == 2020] = 'winter19-20'
conv.layer$winter[conv.layer$month >= 11 & conv.layer$year == 2020] = 'winter20-21'
conv.layer$winter[conv.layer$month <= 5 & conv.layer$year == 2021] = 'winter20-21'
ggplot(conv.layer %>% filter(!is.na(winter))) +
geom_point(aes(doy, energy)) +
facet_wrap(~ winter + factor(month, levels = c(10, 11,12,1,2,3,4,5,6)), ncol =  9, scales = 'free_x')
winter.layer = conv.layer %>% filter(!is.na(winter)) %>%
mutate(col =ifelse(winter == 'winter18-19', 'darkred', ifelse(winter == 'winter19-20','#E69F00' ,"#56B4E9"))) %>%
mutate(date = as.Date(format(Time, format ='%m-%d'), format ='%m-%d' ))
p1 <- ggplot(winter.layer) +
geom_line(aes(date, energy,  col = winter), linewidth = 1.5) +
# facet_wrap(~ winter , ncol= 1, scales = 'free_x') +
# scale_color_gradientn(colours = rev(RColorBrewer::brewer.pal(11, 'RdYlBu'))) +
scale_color_manual(values = c('darkred','#E69F00', "#56B4E9"), name='') +
labs(y = expression(paste("Internal energy (J ",m^-2,")")), x = "") +
geom_vline(xintercept= winter.layer$date[ which(abs(winter.layer$minT - 4) < 0.01)], col = winter.layer$col[ which(abs(winter.layer$minT - 4) < 0.01)]) +
theme_bw(); p1
winter.layer = conv.layer %>% filter(!is.na(winter)) %>%
mutate(col =ifelse(winter == 'winter18-19', 'darkred', ifelse(winter == 'winter19-20','#E69F00' ,"#56B4E9"))) %>%
mutate(date = as.Date(format(Time, format ='%m-%d'), format ='%m-%d' )) %>%
mutate(day = day(Time),
hour = hour(Time),
week = week(Time),
datetime = ifelse(month > 6, lubridate::make_datetime(2020, month, day, hour, 0, 0), lubridate::make_datetime(2021, month, day, hour, 0, 0))) %>%
filter(!is.na(winter))
winter.layer
plot_datetime = winter.layer$datetime
# plot_label = (format(m_df_timeseries$Time, format ='%m-%d %H:00:00') )
plot_breaks = seq(min(plot_datetime), max(plot_datetime), 1000000)
plot_label = format(as.POSIXct((plot_breaks), origin='1970-01-01'),  format ='%m-%d %H:00:00')
match(plot_breaks, plot_datetime)
plot_breaks
plot_label
p1 <- ggplot(winter.layer) +
geom_line(aes(datetime, energy,  col = winter), linewidth = 1.5) +
# facet_wrap(~ winter , ncol= 1, scales = 'free_x') +
# scale_color_gradientn(colours = rev(RColorBrewer::brewer.pal(11, 'RdYlBu'))) +
scale_color_manual(values = c('darkred','#E69F00', "#56B4E9"), name='') +
scale_x_continuous(breaks = plot_breaks,labels= plot_label) +
labs(y = expression(paste("Internal energy (J ",m^-2,")")), x = "") +
geom_vline(xintercept= winter.layer$date[ which(abs(winter.layer$minT - 4) < 0.01)], col = winter.layer$col[ which(abs(winter.layer$minT - 4) < 0.01)]) +
theme_bw(); p1
plot_label
plot_breaks
ggplot(winter.layer) +
geom_line(aes(datetime, energy,  col = winter), linewidth = 1.5) +
# facet_wrap(~ winter , ncol= 1, scales = 'free_x') +
# scale_color_gradientn(colours = rev(RColorBrewer::brewer.pal(11, 'RdYlBu'))) +
scale_color_manual(values = c('darkred','#E69F00', "#56B4E9"), name='')
p1 <- ggplot(winter.layer) +
geom_line(aes(datetime, energy,  col = winter), linewidth = 1.5) +
# facet_wrap(~ winter , ncol= 1, scales = 'free_x') +
# scale_color_gradientn(colours = rev(RColorBrewer::brewer.pal(11, 'RdYlBu'))) +
scale_color_manual(values = c('darkred','#E69F00', "#56B4E9"), name='') +
scale_x_continuous(breaks = plot_breaks,labels= plot_label) +
labs(y = expression(paste("Internal energy (J ",m^-2,")")), x = "") +
geom_vline(xintercept= winter.layer$datetime[ which(abs(winter.layer$minT - 4) < 0.01)], col = winter.layer$col[ which(abs(winter.layer$minT - 4) < 0.01)]) +
theme_bw()+theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, vjust = 0.5, hjust = 1), axis.title.x = element_blank()); p1
p1 <- ggplot(winter.layer) +
geom_line(aes(datetime, energy,  col = winter), linewidth = 1.5) +
# facet_wrap(~ winter , ncol= 1, scales = 'free_x') +
# scale_color_gradientn(colours = rev(RColorBrewer::brewer.pal(11, 'RdYlBu'))) +
scale_color_manual(values = c('darkred','#E69F00', "#56B4E9"), name='') +
scale_x_continuous(breaks = plot_breaks,labels= plot_label) +
labs(y = expression(paste("Internal energy (J ",m^-2,")")), x = "") +
geom_vline(xintercept= winter.layer$datetime[ which(abs(winter.layer$minT - 4) < 0.01)], col = winter.layer$col[ which(abs(winter.layer$minT - 4) < 0.001)]) +
theme_bw()+theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, vjust = 0.5, hjust = 1), axis.title.x = element_blank()); p1
p1 <- ggplot(winter.layer) +
geom_line(aes(datetime, energy,  col = winter), linewidth = 1.5) +
# facet_wrap(~ winter , ncol= 1, scales = 'free_x') +
# scale_color_gradientn(colours = rev(RColorBrewer::brewer.pal(11, 'RdYlBu'))) +
scale_color_manual(values = c('darkred','#E69F00', "#56B4E9"), name='') +
scale_x_continuous(breaks = plot_breaks,labels= plot_label) +
labs(y = expression(paste("Internal energy (J ",m^-2,")")), x = "") +
geom_vline(xintercept= winter.layer$datetime[ which(abs(winter.layer$minT - 4) < 0.001)], col = winter.layer$col[ which(abs(winter.layer$minT - 4) < 0.001)]) +
theme_bw()+theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, vjust = 0.5, hjust = 1), axis.title.x = element_blank()); p1
p1 <- ggplot(winter.layer) +
geom_line(aes(datetime, energy,  col = winter), linewidth = 1.5) +
# facet_wrap(~ winter , ncol= 1, scales = 'free_x') +
# scale_color_gradientn(colours = rev(RColorBrewer::brewer.pal(11, 'RdYlBu'))) +
scale_color_manual(values = c('darkred','#E69F00', "#56B4E9"), name='') +
scale_x_continuous(breaks = plot_breaks,labels= plot_label) +
labs(y = expression(paste("Internal energy (J ",m^-2,")")), x = "") +
geom_vline(xintercept= winter.layer$datetime[ which(abs(winter.layer$minT - 4) < 0.01)], col = winter.layer$col[ which(abs(winter.layer$minT - 4) < 0.01)]) +
theme_bw()+theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, vjust = 0.5, hjust = 1), axis.title.x = element_blank()); p1
ggsave(filename = 'figs/energy_hourly.png', plot = p1, width = 30, height = 15, units = 'cm')
